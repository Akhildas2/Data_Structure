1.What is Soring ?

    Sorting is a fundamental concept in data structures and algorithms, involving the process of arranging elements in a specific order.Typically, sorting is done in ascending or descending order.

3.Why Use Sorting?

    Sorting offers numerous advantages in data manipulation:
        1.Efficiency : Sorted data allows for more efficient search algorithms like binary search, which can operate in O(log n) time compared to O(n) time for linear search in unsorted data.
        2.Data Organization: Sorting makes data more readable and easier to understand. 
        3.Optimized Algorithms: Many algorithms perform better on sorted data. 
        4.Facilitates Other Algorithms: Sorting is a prerequisite for many algorithms such as those used in data processing, analytics, and database management.

3.Type of sorting ?

    1.Bubble sorted

        > It repeatedly iterates through the array, comparing adjacent elements and swapping them if they're in the wrong order. Time complexity: O(n^2) in the worst case.
    
    2.Selection Sort

        > Divides the input into two parts: the sorted part and the unsorted part. It repeatedly selects the smallest (or largest) element from the unsorted part and moves it to the sorted part.Time Complexity: O(n²)

    3.Insertion Sort
    
        > Builds the sorted array one item at a time by repeatedly picking the next item and inserting it into the correct position.Time Complexity: O(n²)

    4.Merge Sort

        > Divides the array into halves (or smaller sub-arrays), sorts them recursively, and then merges the sorted sub-arrays.Time complexity: O(n log n)

    5.Quick Sort 

        > Picks a pivot element and partitions the array into two sub-arrays: elements less than the pivot and elements greater than the pivot. Sorts both sub-arrays recursively. Time complexity: O(n log n) 

    6.Heap Sort

        > Converts the array into a heap data structure, then repeatedly extracts the maximum element from the heap and rebuilds the heap until it is empty.Time Complexity: O(n log n)

    7.Radix Sort

        > Non-comparative integer sorting algorithm that sorts by processing individual digits. It processes digits from least significant to most significant.Time Complexity: O(nk) where k is the number of digits

    8.Counting Sort

        > Non-comparative sorting algorithm that counts the occurrences of each distinct element and uses this information to place elements into the sorted output array.Time Complexity: O(n+k) where k is the range of input

4.Applications of sorting 

    1.Searching: Improves the performance of search algorithms.
    2.Data Processing: Facilitates efficient data processing and analysis.
    3.Database Management: Essential for database operations like indexing and query optimization.
    4.Visualization: Makes data visualization more meaningful and interpretable.
    5.Algorithms: Used as a key step in many other algorithms, such as divide and conquer algorithms.
    