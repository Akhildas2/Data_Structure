1.What is Linear Search?

Linear search, also known as sequential search, is a simple algorithm used to find a particular element in a list or an array.
It works by checking each element of the list sequentially until the desired element is found or the end of the list is reached.

2.How Linear Search Works:

    1.Start at the first element of the list.
    2.Compare the target value with the current element of the list.
    3.If the target value matches the current element, return the index of the current element.
    4.If the target value does not match, move to the next element and repeat step 2.
    5.If the end of the list is reached and the target value has not been found, return a special value (commonly -1) indicating that the element is not in the list.

3.Use case for Linear Search

    1.Unsorted Lists: Linear search is especially useful when dealing with unsorted lists where there is no faster searching method available.
    2.Small Lists: For small datasets, linear search can be efficient because of its simplicity and minimal overhead.
    3.Real-time search: It can be useful for real-time searches where speed of implementation is more important than search speed itself.

4.Advantages:

    1.Simplicity: Easy to understand and implement.
    2.No Preprocessing: Does not require the list to be sorted or modified in any way.
    3.Works with Any Data Structure: Can be used with arrays, linked lists, or any collection that allows sequential access.

5.Disadvantages:

    1.Inefficiency for Large Lists: The time complexity is O(n), making it inefficient for large datasets compared to more advanced algorithms like binary search.
    2.Sequential Access Required: Needs to check each element one by one, which can be slow for large datasets.
